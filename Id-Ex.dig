<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>ID_EX_Register</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk_i,turn_off_i,Mem_to_Reg_in,Reg_Write_in,Mem_Write_in,Mem_Read_in,ALUsrc_in,branch_in,ALUOP_in:3,rs1_in:32,rs2_in:32,imm_gen_in:32,pc_mais_4_in:32,rd_in:5</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ID_EX_Register is
    Port ( 
        clk_i           : in  STD_LOGIC;
        turn_off_i      : in  STD_LOGIC;
        Mem_to_Reg_in   : in  STD_LOGIC;
        Reg_Write_in    : in  STD_LOGIC;
        Mem_Write_in    : in  STD_LOGIC;
        Mem_Read_in     : in  STD_LOGIC;
        ALUsrc_in       : in  STD_LOGIC;
        branch_in       : in  STD_LOGIC;
        ALUOP_in        : in  STD_LOGIC_VECTOR(2 downto 0);
        rs1_in          : in  STD_LOGIC_VECTOR(31 downto 0);
        rs2_in          : in  STD_LOGIC_VECTOR(31 downto 0);
        imm_gen_in      : in  STD_LOGIC_VECTOR(31 downto 0);
        pc_mais_4_in    : in  STD_LOGIC_VECTOR(31 downto 0);
        rd_in           : in  STD_LOGIC_VECTOR(4 downto 0);
        Mem_to_Reg_out  : out STD_LOGIC;
        Reg_Write_out   : out STD_LOGIC;
        Mem_Write_out   : out STD_LOGIC;
        Mem_Read_out    : out STD_LOGIC;
        ALUsrc_out      : out STD_LOGIC;
        branch_out      : out STD_LOGIC;
        ALUOP_out       : out STD_LOGIC_VECTOR(2 downto 0);
        rs1_out         : out STD_LOGIC_VECTOR(31 downto 0);
        rs2_out         : out STD_LOGIC_VECTOR(31 downto 0);
        imm_gen_out     : out STD_LOGIC_VECTOR(31 downto 0);
        pc_mais_4_out   : out STD_LOGIC_VECTOR(31 downto 0);
        rd_out          : out STD_LOGIC_VECTOR(4 downto 0)
    );
end ID_EX_Register;

architecture Behavioral of ID_EX_Register is
begin
    process(clk_i)
    begin
        if rising_edge(clk_i) then
            if turn_off_i = &apos;0&apos; then
                Mem_to_Reg_out  &lt;= Mem_to_Reg_in;
                Reg_Write_out   &lt;= Reg_Write_in;
                Mem_Write_out   &lt;= Mem_Write_in;
                Mem_Read_out    &lt;= Mem_Read_in;
                ALUsrc_out      &lt;= ALUsrc_in;
                branch_out      &lt;= branch_in;
                ALUOP_out       &lt;= ALUOP_in;
                rs1_out         &lt;= rs1_in;
                rs2_out         &lt;= rs2_in;
                imm_gen_out     &lt;= imm_gen_in;
                pc_mais_4_out   &lt;= pc_mais_4_in;
                rd_out          &lt;= rd_in;
            end if;
        end if;
    end process;
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>Mem_to_Reg_out,Reg_Write_out,Mem_Write_out,Mem_Read_out,ALUsrc_out,branch_out,ALUOP_out:3,rs1_out:32,rs2_out:32,imm_gen_out:32,pc_mais_4_out:32,rd_out:5</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="260" y="140"/>
    </visualElement>
  </visualElements>
  <wires/>
  <measurementOrdering/>
</circuit>